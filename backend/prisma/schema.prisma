// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(PLATFORM_GUARD)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Route {
  id          String   @id @default(cuid())
  routeNumber String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  buses Bus[]
  stops RouteStop[]

  @@map("routes")
}

model Station {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  address   String
  latitude  Float
  longitude Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  routeStops RouteStop[]
  arrivals   Arrival[]

  @@map("stations")
}

model RouteStop {
  id        String   @id @default(cuid())
  routeId   String
  stationId String
  order     Int
  createdAt DateTime @default(now())

  // Relations
  route   Route   @relation(fields: [routeId], references: [id], onDelete: Cascade)
  station Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@unique([routeId, stationId])
  @@map("route_stops")
}

model Bus {
  id           String   @id @default(cuid())
  busNumber    String   @unique
  plateNumber  String   @unique
  routeId      String
  capacity     Int      @default(50)
  isActive     Boolean  @default(true)
  currentLat   Float?
  currentLng   Float?
  lastLocation DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  route     Route      @relation(fields: [routeId], references: [id])
  occupancy Occupancy[]
  cameras   Camera[]
  arrivals  Arrival[]

  @@map("buses")
}

model Camera {
  id        String   @id @default(cuid())
  busId     String
  deviceId  String   @unique
  location  String   // "front_door", "back_door", "middle"
  isActive  Boolean  @default(true)
  lastPing  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bus Bus @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@map("cameras")
}

model Occupancy {
  id        String   @id @default(cuid())
  busId     String
  count     Int
  timestamp DateTime @default(now())
  source    String   // "camera", "manual", "estimated"

  // Relations
  bus Bus @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@map("occupancy")
}

model Arrival {
  id        String   @id @default(cuid())
  busId     String
  stationId String
  eta       DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bus    Bus     @relation(fields: [busId], references: [id], onDelete: Cascade)
  station Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@map("arrivals")
}

model Alert {
  id        String      @id @default(cuid())
  type      AlertType
  busId     String?
  routeId   String?
  message   String
  severity  AlertSeverity
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  resolvedAt DateTime?

  @@map("alerts")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("system_logs")
}

enum UserRole {
  ADMIN
  PLATFORM_GUARD
  OPERATOR
  VIEWER
}

enum AlertType {
  CAPACITY_LIMIT
  CAMERA_OFFLINE
  BUS_DELAY
  SYSTEM_ERROR
  MAINTENANCE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
} 